---
layout: post
title:  "ajax"
date:   2016-12-17 11:49:45 +0200
categories: 前端总结
---
####Ajax跨域请求COOKIE无法带上的解决办法

原生ajax请求方式：
{% highlight ruby %}
var xhr = new XMLHttpRequest();  
xhr.open("POST", "http://xxxx.com/demo/b/index.php", true);  
xhr.withCredentials = true; //支持跨域发送cookies
xhr.send();
{% endhighlight %}
jquery的ajax的post方法请求：
{% highlight ruby %}
 $.ajax({
               type: "POST",
               url: "http://xxx.com/api/test",
               dataType: 'jsonp',
               xhrFields: {
                      withCredentials: true
              },
            crossDomain: true,
           success:function(){
     },
           error:function(){
    }
})
{% endhighlight %}
服务器端设置：
{% highlight ruby %}
header("Access-Control-Allow-Credentials: true");
header("Access-Control-Allow-Origin: http://www.xxx.com");
{% endhighlight %}
####Ajax跨域请求cors 
{% highlight ruby %}  
if ($http_origin ~* (https?://(.+\.)?youku\.com)) {
    set $cors "$http_origin";
}
if ($http_origin ~* (https?://hudong\.pl\.youku\.com)) {
         set $cors "$http_origin";
     }
     add_header Access-Control-Allow-Origin "$cors";
     add_header Access-Control-Allow-Methods "GET,POST,OPTIONS";
     add_header Access-Control-Allow-Credentials 'true';
     add_header Access-Control-Allow-Headers "Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,Keep-Alive,X-Requested-With,If-Modified-Since,youku-header";
{% endhighlight %}
####jsonp    
jsonpCallback:callback方法名，如果不设置这个jquery会随机产生一个方法名。
cache:true： 允许缓存，如果为false，请求url上会带上时间戳
{% highlight ruby %} 
$.ajax({
                method: "GET",
                url: url,
                data: opt,
                dataType: "jsonp",
                jsonp: "callback",
                jsonpCallback: "jsonpCallback",
                cache:true,
                success: callback,
                error: callback,
                beforeSend: function(){}
            });
{% endhighlight %}
####ajaxPrefilter 
{% highlight ruby %}   
$.ajaxPrefilter(function(options, originalOptions, xhr) {
            var token = $('meta[name="xsrftoken"]').attr('content');
            if (token) {
                return xhr.setRequestHeader('X-XSRF-TOKEN', token);
            }
        });
{% endhighlight %}
####HTTP请求中8种请求方法    
1、OPTIONS         
返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性     
2、HEAD         
向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。     
3、GET    
向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中，例如在Web      Application中，其中一个原因是GET可能会被网络蜘蛛等随意访问。Loadrunner中对应get请求函数：web_link和web_url   
4、POST      
向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/    或已有资源的修改。 Loadrunner中对应POST请求函数：web_submit_data,web_submit_form   
5、PUT    
向指定资源位置上传其最新内容
6、DELETE    
请求服务器删除Request-URL所标识的资源
7、TRACE    
回显服务器收到的请求，主要用于测试或诊断
8、CONNECT    
HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。    
注意：    
1）方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Mothod Not     Allowed）；当服务器不认识或者不支持对应的请求方法时，应返回状态码501（Not Implemented）。    
2）HTTP服务器至少应该实现GET和HEAD/POST方法，其他方法都是可选的，此外除上述方法，特定的HTTP服务器支持扩展自定义的方法。
#### get/post  
1\get 请求是将数据附在 url 上，而 post 是将数据封装在 request body 中。post 请求只是相对安全的。（防君子防不了小人）
2\ get请求是可以被缓存的， html/js/css/img 等文件都能被浏览器缓存（也可以被服务器缓存），而这些文件的获取，都是用的 get 请求。事实上，web 中的绝大多数请求都是用 get 完成的，post 请求目前为止我只是在 ajax 以及 form 表单中有见过。$.ajax({cach:false})清缓存    
3、请求数据大小      
http 协议中的 get/post 并没有发送数据大小的限制，对发送数据大小产生限制的是浏览器以及操作系统、服务器，http 本身并没有对 url 长度有所限制。   
IE 对 URL 长度的限制是 2083字节（<=IE 8）。对于其他浏览器，如 Netscape、FireFox 等，理论上没有长度限制，其限制取决于操作系统以及服务器的支持。而 chrome 遇到长度很长的 URL 时，会直接 崩溃。
URL 长了，对服务器处理也是一种负担。原本一个会话就没有多少数据，现在如果有人恶意地构造几个几 M 大小的 URL，并不停地访问你的服务器。服务器的最大并发数显然会下降。另一种攻击方式是，把告诉服务器 Content-Length 是一个很大的数，然后只给服务器发一点儿数据，嘿嘿，服务器你就傻等着去吧。哪怕你有超时设置，这种故意的次次访问超时也能让服务器吃不了兜着走。有鉴于此，多数服务器出于安全啦、稳定啦方面的考虑，会给 URL 长度加限制。    
理论上讲，POST 是没有大小限制的，HTTP 协议规范也没有进行大小限制，说 "POST数据量存在80K/100K 的大小限制" 是不准确的，POST 数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。          
#### 基础方法     
{% highlight ruby %}
function trimstr(s){
    return s.replace(/(^\s*)|(\s*$)/g, "");
}
function htmlspecialchars(str)  
{  
    var s = "";
    if (str.length == 0) return "";
    for   (var i=0; i<str.length; i++)
    {
        switch (str.substr(i,1))
        {
            case "<": s += "&lt;"; break;
            case ">": s += "&gt;"; break;
            case "&": s += "&amp;"; break;
            case " ":
                if(str.substr(i + 1, 1) == " "){
                    s += " &nbsp;";
                    i++;
                } else s += " ";
                break;
            case "\"": s += "&quot;"; break;
            case "\n": s += "<br>"; break;
            default: s += str.substr(i,1); break;
        }
    }
    return s;
}
function isURL (str_url) { 
    var strRegex = '((https|http)://)?'
                + '('
                + '([0-9]{1,3}\\.){3}[0-9]{1,3}' // IP形式的URL- 199.194.52.184 
                + '|' // 允许IP和DOMAIN（域名） 
                + '([a-zA-Z0-9_!~*\'()-]+\\.)*' // 域名- www. 
                + '([a-zA-Z0-9-]{0,61})?[a-zA-Z0-9]\\.' // 二级域名 
                + '[a-z]{2,6}' // first level domain- .com or .museum 
                + ')'
                + '(:[0-9]{1,4})?' // 端口- :80 
                + '((/|\\?)([/a-zA-Z0-9_!~*\'()\\.;?:@&=+$,%#-]+)?)?';
    var re=new RegExp(strRegex,"ig");
    ret = str_url.replace(re,function($0,$1){
        var replace;
        if(typeof($1) !== 'undefined' && $1 === 'http://'){
            replace = "<a href='"+$0+"' app_open='"+$0+"' target='_blank'>"+$0+"</a>";
        }else{
            replace = "<a href='http://"+$0+"' app_open='http://"+$0+"' target='_blank'>"+$0+"</a>";
        }
        return replace;
    });
    return ret;
} 

swipExtend:function(element){
                  var that = this;
                  var isTouchMove, startTx, startTy;
                  element.addEventListener( 'touchstart', function( e ){
                     var touches = e.touches[0];
                         startTx = touches.clientX;
                         startTy = touches.clientY;
                         isTouchMove = false;
                  }, false );
                 element.addEventListener( 'touchmove', function( e ){
                     isTouchMove = true;
                     e.preventDefault();
                 }, false );
                 element.addEventListener( 'touchend', function( e ){
                     if( !isTouchMove ){
                     return;
                     }
                     var touches = e.changedTouches[0],
                         endTx = touches.clientX,
                         endTy = touches.clientY,
                         distanceX = startTx - endTx
                         distanceY = startTy - endTy,
                         isSwipe = false;
                   if( Math.abs(distanceX) >= Math.abs(distanceY) ){
                       if( distanceX > 20 ){
                            isSwipe = true;
                            that.validIndex +=3;
                            that.ClickScroll(that.validIndex);
                       }
                       else if( distanceX < -20 ){
                           isSwipe = true;
                           that.validIndex -=3;
                           that.ClickScroll(that.validIndex);
                       }
                    }
                  else{
                       if( distanceY > 20 ){
                        isSwipe = true;
                       }
                       else if( distanceY < -20 ){
                        isSwipe = true;
                       }
                 }
                 if( isSwipe ){
                  }
                }, false );
}
{% endhighlight %}


Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: http://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
