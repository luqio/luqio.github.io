---
layout: post
title:  "es6-五、数值的扩展"
date: 2016-12-28 6:00:00 +0800
categories: jekyll es6
---
#### 1、Math新增的方法
1.1 Math.trunc方法用于去除一个数的小数部分，返回整数部分      
  Math.floor 求一个浮点数的地板，就是求一个最接近它的整数，它的值小于或等于这个浮点数。
  Round是四舍五入的。。。Ceiling是向上取整。。float是向下取整    
  {% highlight ruby %}
        Math.trunc(4.1) // 4
        Math.trunc(4.9) // 4
        Math.trunc(-4.1) // -4
        Math.trunc(-4.9) // -4
        Math.trunc(-0.1234) // -0
    Math.floor(0.60)  -- 0
    Math.floor(0.40)  -- 0
    Math.floor(5)  -- 5
    Math.floor(5.1) -- 5
    Math.floor(-5.1) -- -6
    Math.floor(-5.9) -- -6
    对于没有部署这个方法的环境，可以用下面的代码模拟。
    Math.trunc = Math.trunc || function(x) {
      return x < 0 ? Math.ceil(x) : Math.floor(x);
    };
    {% endhighlight %}
1.2  Math.sign方法用来判断一个数到底是正数、负数、还是零。
{% highlight ruby %}
Math.sign(-5) // -1
Math.sign(5) // +1
Math.sign(0) // +0
Math.sign(-0) // -0
Math.sign(NaN) // NaN
Math.sign('foo'); // NaN
Math.sign();      // NaN
对于没有部署这个方法的环境，可以用下面的代码模拟。
Math.sign = Math.sign || function(x) {
  x = +x; // convert to a number
  if (x === 0 || isNaN(x)) {
    return x;
  }
  return x > 0 ? 1 : -1;
};
{% endhighlight %}
1.3 Math.cbrt()计算一个数的立方根  
{% highlight ruby %}
pow() 方法可返回 x 的 y 次幂的值。
Math.abs() 方法取绝对值  
Math.cbrt(-1) // -1
Math.cbrt(0)  // 0
Math.cbrt(1)  // 1
Math.cbrt(2)  // 1.2599210498948734
Math.cbrt('8') // 2
Math.cbrt('hello') // NaN
对于没有部署这个方法的环境，可以用下面的代码模拟。
Math.cbrt = Math.cbrt || function(x) {
  var y = Math.pow(Math.abs(x), 1/3);
  return x < 0 ? -y : y;
};
{% endhighlight %}
1.4 Math.clz32() JavaScript的整数使用32位二进制形式表示，Math.clz32方法返回一个数的32位无符号整数形式有多少个前导0。     
1.5 Math.imul     
Math.imul方法返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。     
1.6 Math.fround方法返回一个数的单精度浮点数形式。   
1.7 Math hypot() Math.hypot方法返回所有参数的平方和的平方根。
{% highlight ruby %}   
Math.hypot(3, 4);        // 5
Math.hypot(3, 4, 5);     // 7.0710678118654755
Math.hypot();            // 0
Math.hypot(NaN);         // NaN
Math.hypot(3, 4, 'foo'); // NaN
Math.hypot(3, 4, '5');   // 7.0710678118654755
Math.hypot(-3);          // 3
{% endhighlight %}
2 对数方法    
ES6新增了4个对数相关方法。
（1） Math.expm1() ：Math.expm1(x)返回ex - 1，即Math.exp(x) - 1。
{% highlight ruby %}
Math.expm1 = Math.expm1 || function(x) {
  return Math.exp(x) - 1;
};
{% endhighlight %}
（2）Math.log1p()  Math.log1p(x)方法返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。    
{% highlight ruby %}
Math.log1p = Math.log1p || function(x) {
  return Math.log(1 + x);
};
{% endhighlight %}
(3) Math.log10()    
Math.log10(x)返回以10为底的x的对数。如果x小于0，则返回NaN。   
{% highlight ruby %}
Math.log10 = Math.log10 || function(x) {
  return Math.log(x) / Math.LN10;
};
{% endhighlight %}
(4) Math.log2()  
{% highlight ruby %}  
Math.log2 = Math.log2 || function(x) {
  return Math.log(x) / Math.LN2;
};
{% endhighlight %}
#### 三角函数方法
ES6新增了6个三角函数方法。      
Math.sinh(x) 返回x的双曲正弦（hyperbolic sine）  
Math.cosh(x) 返回x的双曲余弦（hyperbolic cosine）  
Math.tanh(x) 返回x的双曲正切（hyperbolic tangent）  
Math.asinh(x) 返回x的反双曲正弦（inverse hyperbolic sine）  
Math.acosh(x) 返回x的反双曲余弦（inverse hyperbolic cosine）   
Math.atanh(x) 返回x的反双曲正切（inverse hyperbolic tangent）   
#### 3、指数运算符    
ES7新增了一个指数运算符（**），目前Babel转码器已经支持。   
{% highlight ruby %} 
2 ** 2 // 4
2 ** 3 // 8   
let a = 2;
a **= 2;
// 等同于 a = a * a;
let b = 3;
b **= 3;
// 等同于 b = b * b * b;
{% endhighlight %}

**博客demo地址**： [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: http://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

